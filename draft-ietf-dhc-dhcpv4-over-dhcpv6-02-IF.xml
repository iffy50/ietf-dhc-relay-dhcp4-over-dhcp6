<?xml version="1.0" encoding="US-ASCII"?>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc tocdepth="6"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc autobreaks="no"?>
<?rfc subcompact="no"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc2131 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2131.xml">
<!ENTITY rfc3315 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3315.xml">
<!ENTITY rfc4361 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4361.xml">
<!ENTITY rfc5010 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5010.xml">
]>

<rfc category="std" docName="draft-ietf-dhc-dhcpv4-over-dhcpv6-02" ipr="trust200902">

<front>
  <title abbrev="DHCPv4 over DHCPv6">DHCPv4 over DHCPv6 Transport</title>

  <author fullname="Qi Sun" initials="Q." surname="Sun">
    <organization>Tsinghua University</organization>
    <address>
    <postal>
      <street>Department of Computer Science, Tsinghua University</street>
      <city>Beijing</city>
      <code>100084</code>
      <country>P.R.China</country>
    </postal>
    <phone>+86-10-6278-5822</phone>
    <email>sunqi@csnet1.cs.tsinghua.edu.cn</email>
    </address>
  </author>

  <author fullname="Yong Cui" initials="Y." surname="Cui">
    <organization>Tsinghua University</organization>
    <address>
    <postal>
      <street>Department of Computer Science, Tsinghua University</street>
      <city>Beijing</city>
      <code>100084</code>
      <country>P.R.China</country>
    </postal>
    <phone>+86-10-6260-3059</phone>
    <email>yong@csnet1.cs.tsinghua.edu.cn</email>
    </address>
  </author>

    <author fullname="Marcin Siodelski" initials="M." surname="Siodelski">
      <organization abbrev="ISC"></organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <region>CA</region>
          <code>94063</code>
          <country>USA</country>
        </postal>
        <phone>+1 650 423 1431</phone>
        <email>msiodelski@gmail.com</email>
      </address>
    </author>

    <author fullname="Suresh Krishnan" initials="S." surname="Krishnan">
      <organization>Ericsson</organization>
      <address>
         <email>suresh.krishnan@ericsson.com</email>
      </address>
    </author>

    <author fullname="Ian Farrer" initials="I." surname="Farrer">
      <organization>Deutsche Telekom AG</organization>
      <address>
        <postal>
          <street>GTN-FM4,Landgrabenweg 151</street>
          <city>Bonn</city>
          <region>NRW</region>
          <code>53227</code>
          <country>Germany</country>
        </postal>
        <email>ian.farrer@telekom.de</email>
      </address>
    </author>


  <date year="2013"/>

  <workgroup>DHC Working Group</workgroup>

  <abstract>
      <t>IPv4 connectivity is still needed as networks migrate towards IPv6.
      Users require IPv4 configuration even if the uplink to their service
      provider supports IPv6 only.  This document describes a mechanism for 
      obtaining IPv4 configuration information dynamically in IPv6 networks by 
      carrying DHCPv4 messages over DHCPv6 transport. Two new DHCPv6 messages 
      as well as a new DHCPv6 option are defined for the purpose of conveying 
      DHCPv4 messages through IPv6 networks. 
      </t>
  </abstract>
</front>

<middle>
    <section title="Introduction">
      <t>As the migration towards IPv6 continues, IPv6-only networks
      will become more prevalent. At the same time, IPv4 connectivity will 
      continue to be provided as a service over IPv6-only networks. In addition
      to providing IPv4 addresses for clients of this service, other
      IPv4 configuration parameters may also need to be provided (e.g.
      addresses of IPv4-only services).</t>

      <t>By conveying DHCPv4 messages over DHCPv6 transport, this document
      describes a mechanism for the dynamic provisioning of IPv4 addresses 
      and other configuration parameters. The mechanism leverages existing 
      infrastructure for DHCPv4, e.g. failover, DNS updates, leasequery, etc. 
      This mechanism is suitable for stateful allocation and management of IPv4
       addresses (address leasing) and other DHCPv4 configuration parameters 
       across IPv6-only networks. </t>

    </section>

    <section title="Requirements Language">

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119"/>.
      </t>
    </section>

    <section title="Terminology">
      <t>This document makes use of the following terms:
      <list hangIndent="22" style="hanging">
        <t hangText="DHCPv4-over-DHCPv6:">A protocol described in this document,
         which is used to carry DHCPv4 messages encapsulated in DHCPv6 messages.
         </t>

        <t hangText="DHCP client:">The 'DHCP client' in this document consists
         of both DHCPv4 and DHCPv6 client engines. The client is able to request
          IPv6 configuration information through DHCPv6, as well as to request 
          IPv4 configuration information using DHCPv4-over-DHCPv6 transport.</t>

        <t hangText="4o6 Server:">A DHCP server capable of processing DHCPv4 
        packets wrapped in the DHCPv6 BOOTP Message Option (defined below).
        </t>

      </list>
      </t>
    </section>

    <section title="Architecture Overview">
      <t>The architecture described in this document addresses a typical
      use case, where a DHCP client's uplink supports IPv6 only and the
      Service Provider's network supports IPv6 and limited IPv4 services.
      In this scenario, the client can only use the IPv6 network to access
      IPv4 services and so it must configure IPv4 services using IPv6 as the
      underlying transport protocol.</t>

      <t>Although the purpose of this document is to address the problem of
      communication between DHCPv4 client and DHCPv4 server, the mechanism
      it describes does not restrict the transported messages types only to
      DHCPv4. BOOTP messages can be transported using the same mechanism.</t>

      <t>DHCP clients can be running on CPE devices, end hosts or any other 
      device which supports the DHCP client function. At the time of writing, 
      DHCP clients on CPE devices are easier to modify compared to 
      those implemented on end hosts. As a result, this document uses the CPE 
      as an example for describing the mechanism. This does not preclude any 
      end-host, or other device requiring IPv4 configuration, from implementing
       the mechanism in the future.</t>

      <t>This mechanism works by carrying DHCPv4 messages encapsulated within
      DHCPv6 messages. <xref target="architecture-overview"/>, below,
      illustrates one possible deployment architecture.</t>

      <!-- Removed pieces of text talking about multicast addresses because
      extended discussion regarding multi and unicast is further in this
      section-->
      
      <t>The DHCP client implements a new DHCPv6 message called BOOTREQUESTV6, 
      which contains a new option called OPTION_BOOTP_MSG. The format of this 
      option is described in <xref target="bootp-message-option"/>.</t>

      <t>The DHCPv6 packet can be transmitted either via Relay Agents or
      directly to the 4o6 Server. The server replies with a DHCPv6 response,
      which is a new DHCPv6 message called BOOTREPLYV6. This message carries 
      the DHCPv4 response wrapped with the OPTION_BOOT_MSG Option.</t>

      <figure align="center" anchor="architecture-overview"
              title="Architecture Overview">
      <artwork><![CDATA[
           _____________             _____________
          /             \           /             \
          |             |           |             |
 +--------+-+  IPv6   +-+-----------+-+  IPv6   +-+--------+
 |   DHCP   | network |     DHCP      | network |   4o6    |
 |  Client  +---------+  Relay Agent  +---------+  Server  |
 | (on CPE) |         |               |         |          |
 +--------+-+         +-+-----------+-+         +-+--------+
          |             |           |             |
          \_____________/           \_____________/

      ]]></artwork>
      </figure>


    <t>By default, he DHCPv4-over-DHCPv6 function is disabled on the client. 
    Before a client can use this protocol it MUST obtain the necessary IPv6 
    configuration. If the client is configured to use DHCPv6 to obtain its IPv6 
    configuration, the DHCPv6 server MAY include the DHCPv4-over-DHCPv6 Enable 
    Option in its Reply message 
    to indicate that client SHOULD use the DHCPv4-over-DHCPv6 protocol to 
    obtain additional configuration. The format of the DHCPv4-over-DHCPv6 Enable
     Option (OPTION_DHCP4_O_DHCP6_ENABLE) is described in 
     <xref target="dhcp4o6-enable-option"/>.</t>

    <t>Typically, a client communicates with the 4o6 Servers using well known
    All_DHCP_Relay_Agents_and_Servers multicast address. If a DHCPv6 server is 
    configured to do so, it MAY send unicast addresses of the 4o6 Servers to the
     client during the client's configuration using DHCPv6. The unicast 
     addresses are carried in the 4o6 Server Addresses Option encapsulated in 
     the Reply message. The 4o6 Server Addresses Option's format is defined in 
     <xref target="dhcp4o6-server-addr-option"/>.</t>

    </section>

    <section title="New DHCPv6 Messages">
      <t>There are two new DHCPv6 messages defined in this document which carry DHCPv4 messages
      between a client and a server using DHCPv6 protocol: Boot-request-v6 and Boot-reply-v6.
      This section describes structures of these messages.</t>

      <section title="Message Types">
        <t>The following new message types are defined in this document:
        <list hangIndent="22" style="hanging">
          <t hangText="BOOTREQUESTV6 (TBD):">Identifies a Boot-request-v6 message. A client sends
          this message to a server. The BOOTP Message Option carried by this message contains
          a BOOTREQUEST message that the client uses to request IPv4 configuration parameters
          from the server.</t>

          <t hangText="BOOTREPLYV6 (TBD):">Identifies a Boot-reply-v6 message. A server sends
          this message to a client. It contains a BOOTP Message Option carrying a BOOTREPLY
          message in response to a BOOTREQUEST received by the server in the BOOTP Message
          Option of the Boot-request-v6 message.
          </t>
        </list>
        </t>
      </section>

      <section title="Message Formats">
        <t>Both DHCPv6 messages defined in this document share the following format:</t>

        <figure align="center" anchor="boot-v6-msg-format"
                title="Architecture Overview">
          <artwork><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    msg-type   |                     flags                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
.                            options                            .
.                           (variable)                          .
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
        </figure>
        <t>
          <list hangIndent="16" style="hanging">
            <t hangText="msg-type">Identifies message type. It can be either 
            BOOTREQUESTV6 (TBD) or BOOTREPLYV6 (TBD) which corresponds to the 
            boot-request-v6 or Boot-reply-v6 respectively.</t>
            <t hangText="flags">Specifies flags which provide additional 
            information required by the server to process a DHCPv4 message 
            wrapped in Boot-request-v6 Message, or required by the client to 
            process DHCPv4 message wrapped in Boot-reply-v6 Message.</t>
            <t hangText="options">Options carried by the message and described 
            in <xref target="bootp-v6-options"/>.</t>
          </list>
        </t>
      </section>

      <section title="Boot-request-v6 Message Flags">
        <t>The "flags" field of the Boot-request-v6 is used to carry additional 
        information which may be used by the server to process the encapsulated 
        DHCPv4 message. Currently only one bit of this field is used. Remaining 
        bits are reserved for the future use. Currently the "flags" field has 
        the following format:</t>

        <figure align="center" anchor="boot-request-v6-flags"
                title="Boot-request-v6 flags format">
          <artwork><![CDATA[
0                   1                   2
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|U|                 Reserved                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
        </figure>
        <t>
          <list hangIndent="16" style="hanging">
            <t hangText="U">Unicast Flag. If it is set to 1, it indicates that the
            DHCPv4 message encapsulated with the Boot-request-v6 message would be
            sent to a unicast address if it was sent using IPv4. If this flag is
            set to 0 it indicates that the DHCPv4 message would be sent to broadcast
            address if it was sent using IPv4.</t>
            <t hangText="Reserved">Bits reserved for future use. A client which doesn't implement
            future extensions using these bits MUST set them to 0.</t>
          </list>
        </t>
      </section>

      <section title="Boot-reply-v6 Message Flags">
        <t>This document introduces no flags to be carried in the "flags" field of the Boot-reply-v6
        message. They are all reserved for the future use. Server MUST set all bits of this field
        to 0.</t>
      </section>
    </section>


    <section title="DHCPv6 Options" anchor="bootp-v6-options">

      <section title="BOOTP Message Option Format" anchor="bootp-message-option">
        <t>The BOOTP Message option carries a BOOTP message that is sent
        by the client or the server. Such BOOTP messages exclude any IP or
        UDP headers. </t>

        <t>The format of the BOOTP Message Option is: </t>

        <figure align="center" anchor="option-bootp-msg"
              title="BOOTP Message Option Format">
        <artwork><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        OPTION_BOOTP_MSG       |           option-len          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
.                         BOOTP-message                         .
.                                                               .
.                                                               .
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        ]]></artwork>
        </figure>
      <t>
        <list hangIndent="16" style="hanging">
          <t hangText="option-code">OPTION_BOOTP_MSG (TBD)</t>
          <t hangText="option-len">Length of BOOTP message</t>
          <t hangText="BOOTP-message">The BOOTP message sent by the client
                   or the server. In a Boot-request-v6 message it contains
                   a BOOTREQUEST message sent by a client. In a Boot-reply-v6
                   message it contains a BOOTREPLY message sent by a
                   server in response to a client.</t>
        </list>
      </t>
      </section>

      <section title="DHCPv4-over-DHCPv6 Enable Option Format"
               anchor="dhcp4o6-enable-option">
        <t>The DHCPv4-over-DHCPv6 Enable Option indicates that the client
        SHOULD enable the DHCPv4-over-DHCPv6 function.</t>

        <t>The format of the DHCPv4-over-DHCPv6 Enable Option is: </t>

        <figure align="center" anchor="option-dhcp4o6-enable"
              title="DHCPv4-over-DHCPv6 Enable Option Format">
        <artwork><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  OPTION_DHCP4_O_DHCP6_ENABLE  |           option-len          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        ]]></artwork>
        </figure>
      <t>
        <list hangIndent="16" style="hanging">
          <t hangText="option-code">OPTION_DHCP4_O_DHCP6_ENABLE (TBD)</t>
          <t hangText="option-len"> 0</t>
        </list>
      </t>

      </section>

      <section title="4o6 Servers Address Option Format"
               anchor="dhcp4o6-server-addr-option">
        <t>The 4o6 Servers Address Option carries unicast IPv6 addresses of the
        4o6 Servers.</t>

        <t>The format of the 4o6 Servers Address Option is: </t>

        <figure align="center" anchor="option-4o6-servers"
              title="4o6 Servers Address Option Format">
        <artwork><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| OPTION_DHCP4_O_DHCP6_SERVERS  |           option-len          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
.                        IPv6 Address(es)                       .
.                                                               .
.                                                               .
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        ]]></artwork>
        </figure>
      <t>
        <list hangIndent="16" style="hanging">
          <t hangText="option-code">OPTION_DHCP4_O_DHCP6_SERVERS (TBD)</t>
          <t hangText="option-len">Length of the IPv6 address(es), i.e.
                        integer times of 16.</t>
          <t hangText="IPv6 Address">The IPv6 address(es) of the 4o6 Server(s).</t>
        </list>
      </t>
      </section>
    </section>

    <section anchor="uni_flag" title="Use of the Boot-request-v6 Unicast Flag">
      <t>A DHCPv4 client conforming to the <xref target="RFC2131"/> may send its
      DHCPREQUEST message to either broadcast or unicast address depending on its state.
      For example, the client in the RENEWING state will use a unicast address
      to contact a server and renew its lease. The client in the REBINDING state MUST use
      a broadcast address. If there is a relay agent in the middle, a client in 
      the RENEWING state may send a DHCPREQUEST message to the unicast address of
      the relay agent. In such case the server can't find out whether client sent
      a message to a unicast or broadcast address and thus it can't determine the
      client's state. <xref target="RFC5010"/> introduced the "Flags Suboption" 
      which relay agents add to relayed messages to indicate whether broadcast or 
      unicast was used by the client.</t>

      <t>The DHCPv4-over-DHCPv6 protocol uses IPv6 to deliver DHCPv4 messages 
      to the server. There is no relation between the outer IPv6 address and the 
      inner DHCPv4 message. So the server is not able to know whether the DHCPv4
      messages should have been sent using broadcast or unicast in IPv4
      by checking the IPv6 address. This is similar to the case <xref target="RFC5010"/>
      handled. </t>

      <t>In order to allow the server to determine the client's state, the "Unicast" 
      flag is carried in the Boot-request-v6 message. Client MUST set this flag to 1
      when the DHCPv4 message would have been sent to the unicast address if
      using DHCPv4 over IPv4. This flag MUST be set to 0 if the DHCPv4 client would 
      have sent the message to the broadcast address in IPv4. The choice whether a
      given message should be sent to a broadcast or unicast address MUST be made based
      on the <xref target="RFC2131"/> and its extensions.</t>
    </section>

    <section title="Client Behavior">

      <t>The DHCP client by default doesn't use DHCPv4-over-DHCPv6 protocol to obtain its
      DHCPv4 configuration. Client MUST obtain its IPv6 configuration before it MAY use
      DHCPv4-over-DHCPv6 to obtain DHCPv4 configuration. If IPv6 configuration is obtained
      using DHCPv6 as described in <xref target="RFC3315"/>, client SHOULD request the
      DHCPv4-over-DHCPv6 Enable Option and the 4o6 Server Addresses Option in the Option
      Request Option (ORO) to check if it SHOULD use DHCPv4-over-DHCPv6.</t>

      <t>The DHCPv6 server MAY include these options in the Reply message sent to the client.
      The client determines how to launch the DHCPv4-over-DHCPv6 function based on the
      presence / absence of these two options: </t>
      <t>
        <list style="symbols">
          <t>If the client doesn't receive the DHCPv4-over-DHCPv6 Enable Option, it SHOULD NOT
          enable the DHCPv4 over DHCPv6 function. </t>

          <t>If the client receives the DHCPv4-over-DHCPv6 Enable Option but no
          4o6 Servers Address Option, it SHOULD enable the DHCPv4-over-DHCPv6 function,
          but use IPv6 All_DHCP_Relay_Agents_and_Servers multicast address to communicate with
          the servers or relays as described above.</t>

          <t>If the client receives both options, it SHOULD enable the DHCPv4-over-DHCPv6
          function, and send requests to all unicast addresses conveyed by the 4o6 Server
          Addresses Option. </t>
        </list>
      </t>

      <t>If the client is instructed by the DHCPv6 server to use DHCPv4-over-DHCPv6 function
      it SHOULD generate a DHCPv4 message to obtain configuration from the 4o6 Server.
      This message is stored verbatim in the BOOTP Message Option carried by the
      Boot-request-v6 message. The client MUST put exactly one BOOTP Message Option into a
      single Boot-request-v6 message.</t>

      <t>A client MUST set the Unicast flag as specified in 
      <xref target="uni_flag"/>.</t>

<!-- Here starts the tricky part. Since we allow the use of unicast to multiple servers
we have to deal with sending multiple packets, each going to a different server. That will
complicate an implementation and also this text. This part will need to be extended.-->
      <t>If the client has not received a 4o6 Server Addresses Option from the 
      DHCPv6 server, it transmits the Boot-request-v6 message as specified in 
      Section 13 of <xref target="RFC3315"/>. If the client received this 
      option, it MUST send Boot-request-v6 message to all unicast addresses 
      listed in the received option.</t>

      <t>When a client receives a Boot-reply-v6 message, it MUST look for the
      BOOTP Message Option within this message. If this option is not found, the
      Boot-reply-v6 message is discarded. If the BOOTP Message Option is found,
      the client extracts the DHCPv4 message it contains and processes it as
      described in section 4.4 of <xref target="RFC2131"/>.
      </t>

      <t>DHCP clients are responsible for the retransmission of messages. When
      requesting IPv4 configuration, the client SHOULD follow the normal DHCPv4
      retransmission requirements and strategy as specified in section 4.1 of
      <xref target="RFC2131"/>. As a result there are no explicit transmission
      parameters associated with a Boot-request-v6 message.</t>

      <t>As the DHCPv4 and DHCPv6 clients are running on the same host, the client 
      MUST implement <xref target="RFC4361"/> to ensure that the device correctly
      identifies itself.</t>

    </section>

    <section title="Relay Agent Behavior">
      <t>When a DHCPv6 relay agent receives a Boot-request-v6 message, it MUST
      handle the message as described in section 4 of
      <xref target="I-D.ietf-dhc-dhcpv6-unknown-msg"/>.</t>

      <t>A DHCPv6 relay agent MUST implement the Relay behaviour described in section 
      20.1.1 of <xref target="RFC3315"/>.</t>

      <t>Additionally, the DHCPv6 relay agent MAY allow the configuration of dedicated
      DHCPv4-over-DHCPv6 specific destination addresses, differing from the
      addresses of the DHCPv6 only server(s). To implement this function, the relay 
      checks the received DHCPv6 message type and forwards according to the following
      logic:</t>
      <t>
        <list style="numbers">
            <t>If the message type is Boot-request-v6, then the DHCPv6 request is relayed to
              the configured DHCPv4 aware 4o6 Server's address(es).</t>
            <t>For any other DHCPv6 message type, forward according to section
              20 of <xref target="RFC3315"/>.</t>
        </list>
      </t>
      <t>The above logic only allows for separate relay destinations configured on
      the relay agent closest to the client (single relay hop). Multiple relaying hops
      are not considered in the case of separate relay destinations.</t>
    </section>

    <section title="4o6 Server Behavior">
      <t>When the server receives a Boot-request-v6 message from a
      client, it searches for a BOOTP Message Option. If this option
      is missing, the server discards the packet. The server MAY notify
      an administrator about the receipt of a malformed packet. The
      mechanism for this notification is out of scope for this document</t>

      <t>If the server finds a valid BOOTP Message Option, it extracts the
      original DHCPv4 message sent by the client. This message is
      passed to the DHCPv4 server engine, which generates a response to
      the client as specified in <xref target="RFC2131"/>. This engine can
      be implemented as a built-in DHCPv4 server function of the 4o6 Server,
      or it can be a separate DHCPv4 server instance. Discussion regarding
      communication between the 4o6 Server and a DHCPv4 server engine is
      out of scope for this document.</t>

      <t>When appropriate DHCPv4 response is generated, 4o6 Server places it
      in the payload of a BOOTP Message Option, which it puts into the 
      Boot-reply-v6 message.</t>

      <t>If the Boot-request-v6 message was received directly by the server,
      the Boot-reply-v6 message MUST be unicast from the interface on which
      the original message was received.
      </t>

      <t>If the Boot-request-v6 message was received in a Relay-forward
      message, the server creates a Relay-reply message with the
      Boot-reply-v6 message in the payload of a Relay Message Option, and 
      responds as described in section 20.3 of <xref target="RFC3315"/>.</t>
    </section>

  <section title="Security Considerations">
    <t>In this specification, DHCPv4 messages are encapsulated in the newly
    defined options and messages. This is similar to the handling of current
    relay agent messages. In order to bypass firewalls or network
    authentication gateways, a malicious attacker may leverage this
    feature to convey other messages using DHCPv6, i.e. use DHCPv6
    as a form of encapsulation. However, the potential risk from this is not 
    seen to be greater than that with current DHCPv4 and DHCPv6 practice.</t>
  </section>

  <section title="IANA Considerations">

    <t>IANA is requested to allocate three DHCPv6 option codes for use by
    OPTION_BOOTP_MSG, OPTION_DHCP4_O_DHCP6_ENABLE and 
    OPTION_DHCP4_O_DHCP6_SERVERS,  and two DHCPv6 message type codes for 
    BOOTREQUESTV6 and BOOTREPLYV6. </t>

  </section>

    <section title="Contributors List">
      <t>Many thanks to Ted Lemon, Bernie Volz, Tomek Mrugalski,
      Yuchi Chen and Cong Liu, for their great contributions to the draft.</t>
    </section>


<!--
  <section title="Lifetime Considerations">
    <t>When there is a binding table of IPv4 and IPv6 addresses related
    to the DHCP server, a binding record may become invalid if the IPv6
    address expires. The IPv4 address should be renewed when a client's
    IPv6 address expires in this situation.
    </t>
  </section>
-->

</middle>

<back>

  <references title="Normative References">
    &rfc2119;
    &rfc2131;
    &rfc3315;
    &rfc4361;
    <?rfc include="reference.I-D.ietf-dhc-dhcpv6-unknown-msg" ?>
  </references>

  <references title="Informative References">
    &rfc5010;
    <?rfc include="reference.I-D.ietf-dhc-dhcpv4-over-ipv6" ?>
  </references>

</back>
</rfc>

